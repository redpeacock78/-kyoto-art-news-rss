image: registry.gitlab.com/redpeacock78/alpine-bash-jst:master

variables:
  TAG: "<[Hh][Tt][Mm][Ll]>"
  ALL_URL: "https://kyotoartnews.page.link/all"
  LIFE_URL: "https://kyotoartnews.page.link/life"
  TEACH_URL: "https://kyotoartnews.page.link/teach"
  EVENT_URL: "https://kyotoartnews.page.link/event"
  EMERGENCY_URL: "https://kyotoartnews.page.link/emergency"
  SCHOLARSHIP_URL: "https://kyotoartnews.page.link/scholarship"
  CAREERDESIGN_URL: "https://kyotoartnews.page.link/careerdesign"
  ALL_XML: "public/all.xml"
  LIFE_XML: "public/life.xml"
  TEACH_XML: "public/teach.xml"
  EVENT_XML: "public/event.xml"
  EMERGENCY_XML: "public/emergency.xml"
  SCHOLARSHIP_XML: "public/scholarship.xml"
  CAREERDESIGN_XML: "public/careerdesign.xml"

job:on-schedule:
  only:
    - schedules
  except:
    - pipelines
  script:
    - apk --update --no-cache add openssh bash git curl sed tidyhtml > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "${CI_SERVER_HOST}" >> ~/.ssh/known_hosts
    - eval $(ssh-agent -s) > /dev/null
    - bash -c "ssh-add <(echo '${SSH_PRIVATE_KEY}' | base64 -d) > /dev/null"
    - git config --global user.name "rss_update_bot"
    - git config --global user.email "rss_update@example.com"
    - git remote set-url --push origin git@"${CI_SERVER_HOST}":"${CI_PROJECT_PATH}".git
    - git checkout "${CI_COMMIT_REF_NAME}"
    - git pull
    - mkdir -p public
    - feeds=("${ALL_URL}" "${LIFE_URL}" "${TEACH_URL}" "${EVENT_URL}" "${EMERGENCY_URL}" "${SCHOLARSHIP_URL}" "${CAREERDESIGN_URL}")
    - xmls=("${ALL_XML}" "${LIFE_XML}" "${TEACH_XML}" "${EVENT_XML}" "${EMERGENCY_XML}" "${SCHOLARSHIP_XML}" "${CAREERDESIGN_XML}")
    - for ((i=0; i<"${#feeds[@]}"; i++)); do
    -   feed=$(curl -sL "${feeds[i]}" | sed -z "/${TAG}/s/.*\\n//g")
    -   '[[ -z "${feed}" ]] && : || tidy --wrap 0 --indent-cdata true -xml -utf8 -i -o "${xmls[i]}" <(echo "${feed}") 2>/dev/null'
    - done
    - git add public/*.xml
    - ret=$(git status | sed -ne 's|.*\(clean\)|\1|p')
    - git_tag=$(date +'%Y%m%d-%H%M%S')
    - '[[ -z "${ret}" ]] && git commit -m "[ci skip] Push by GitLab runner." && git push && git tag "${git_tag}" && git push --tags'
    - curl -s --request POST --form token=${CI_JOB_TOKEN} --form ref=master --form "variables[TRIGERRED_JOB]=pages" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline" > /dev/null

job:
  except:
    - schedules
    - pipelines
  script:
    - apk --update --no-cache add openssh bash git curl sed tidyhtml > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "${CI_SERVER_HOST}" >> ~/.ssh/known_hosts
    - eval $(ssh-agent -s) > /dev/null
    - bash -c "ssh-add <(echo '${SSH_PRIVATE_KEY}' | base64 -d) > /dev/null"
    - git config --global user.name "rss_update_bot"
    - git config --global user.email "rss_update@example.com"
    - git remote set-url --push origin git@"${CI_SERVER_HOST}":"${CI_PROJECT_PATH}".git
    - git checkout "${CI_COMMIT_REF_NAME}"
    - git pull
    - mkdir -p public
    - feeds=("${ALL_URL}" "${LIFE_URL}" "${TEACH_URL}" "${EVENT_URL}" "${EMERGENCY_URL}" "${SCHOLARSHIP_URL}" "${CAREERDESIGN_URL}")
    - xmls=("${ALL_XML}" "${LIFE_XML}" "${TEACH_XML}" "${EVENT_XML}" "${EMERGENCY_XML}" "${SCHOLARSHIP_XML}" "${CAREERDESIGN_XML}")
    - for ((i=0; i<"${#feeds[@]}"; i++)); do
    -   feed=$(curl -sL "${feeds[i]}" | sed -z "/${TAG}/s/.*\\n//g")
    -   '[[ -z "${feed}" ]] && : || tidy --wrap 0 --indent-cdata true -xml -utf8 -i -o "${xmls[i]}" <(echo "${feed}") 2>/dev/null'
    - done
    - git add public/*.xml
    - ret=$(git status | sed -ne 's|.*\(clean\)|\1|p')
    - '[[ -z "${ret}" ]] && git commit -m "[ci skip] Push by GitLab runner." && git push'
    - curl -s --request POST --form token=${CI_JOB_TOKEN} --form ref=master --form "variables[TRIGERRED_JOB]=pages" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline" > /dev/null

pages:
  only:
    variables:
      - $variables[TRIGERRED_JOB] == "pages"
  except:
    - schedules
    - pushes
    - web
  stage: deploy
  script:
    - apk --update --no-cache add brotli-libs > /dev/null
    - find public -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\)$' -exec gzip -f -k {} \;
    - find public -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\)$' -exec brotli -f -k {} \;
  artifacts:
    paths:
      - public
  only:
    - master